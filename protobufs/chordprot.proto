syntax = "proto3";

//TODO: search the import
package chordprot;

import "google/protobuf/empty.proto";

message JoinRequest {
    string ip_addr = 1;
    optional bool init = 2;
    optional bool transfer_data = 3;
}

message JoinResponse {
    uint32 num_hops = 1;
}

message LeaveResponse {
    uint32 num_hops = 1;
}

message SuccessorRequest{
    uint32 key_id = 1;
}
                                        
message SuccessorResponse{
    uint32 node_id = 1;
    optional string ip_addr = 2;
}

message FingerUpdateRequest {
    JoinRequest join_req = 1;
    uint32 index = 2;
}

message FixFingerRequest {
    JoinRequest join_req = 1;
    string successor_ip_addr = 2;
    uint32 index = 3;
}

//only for setPredecessor
message setPredecessorRequest {
    string ip_addr = 1;
}

message HopsResponse {
    uint32 num_hops = 1;
}



service Chord {
    rpc join (JoinRequest) returns (JoinResponse);
    rpc leave (google.protobuf.Empty) returns (LeaveResponse);
    rpc find_successor (SuccessorRequest) returns (SuccessorResponse);
    rpc closest_preceding_finger (SuccessorRequest) returns (SuccessorResponse);
    rpc set_predecessor (setPredecessorRequest) returns (google.protobuf.Empty);
    rpc set_successor (setPredecessorRequest) returns (google.protobuf.Empty);
    rpc get_predecessor (google.protobuf.Empty) returns (SuccessorResponse);
    rpc get_successor (google.protobuf.Empty) returns (SuccessorResponse);
    rpc update_finger_table (FingerUpdateRequest) returns (google.protobuf.Empty);
    rpc fix_finger_table (FixFingerRequest) returns (google.protobuf.Empty);
    rpc clear_hops(google.protobuf.Empty) returns (HopsResponse);   
    
}


message CompScientistData {
    string Surname = 1;
    string Education = 2;
    uint32 Awards = 3;
    uint32 Hash = 4;
}

message DataTransferRequest {
    repeated CompScientistData data = 1;
}


message RangeQueryRequest {
    string university = 1;
    optional uint32 max_awards = 2; //maybe min_awards?
}


message JoiningNodeKeyRequest {
    uint32 node_id = 1;
}

message DataTransferResponse {
    repeated CompScientistData data = 1;
}

message FingerTableRecord{
    uint32 start = 1;
    uint32 node = 2;
    string node_ip = 3;

}

message FingerTableResponse {
    repeated FingerTableRecord data = 1; 
}




service DataTransfer {
    rpc store (DataTransferRequest) returns (google.protobuf.Empty);
    rpc request_data (JoiningNodeKeyRequest) returns (DataTransferResponse);
    rpc get_data (RangeQueryRequest) returns (DataTransferResponse);
    rpc get_finger_table (google.protobuf.Empty) returns (FingerTableResponse);
}
    




